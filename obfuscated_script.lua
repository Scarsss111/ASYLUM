-- Obfuscated Lua
loadstring(game:HttpGet('data:text/plain;base64,-- Auto Mop Farm (Synapse-friendly, respawn-safe)
-- Place this in a LocalScript (StarterPlayerScripts) or execute with Synapse.
-- Fixes: always teleports to hub on respawn, always attempts to get/equip mop,
-- binds work to the specific character instance so respawns reliably restart the routine.
local u5bzjm = 47

local var_6bi9xf = true

local var_33qfag = game:GetService("Players")
local 0rkr4l = 84
local var_fo8psr = game:GetService("ReplicatedStorage")
local var_i3a2kr = game:GetService("Workspace")
local var_2xz4rl = game:GetService("CollectionService")
local var_5vqce9 = game:GetService("PathfindingService")
local var_43p6ol = Players.LocalPlayer

local var_6iz7c3 = Vector3.new(134, 255, -704)
local var_1dn6hx = "Mop"
local g7brj0 = 56
local var_bj1vsf = ReplicatedStorage:FindFirstChild("Remote") and ReplicatedStorage.Remote:FindFirstChild("AttemptCleanSpill") and ReplicatedStorage.Remote.AttemptCleanSpill or nil
-- bhq02clp

-- Attempt to locate prompt safely (some maps might not load instantly)
-- ycymogr8
local var_8tvsws getMopGiverPrompt()
local ewbu4d = 84
    local var_yyv21u, res = pcall(function()
        return Workspace.A_MAP.Infrastructure.Facility.UndergroundFacility.CafeGrid["Mop Giver"].Giver.ProximityPrompt
    end)
    if ok then
        return res
    end
    return nil
end

local var_zn66x7 = getMopGiverPrompt()

local var_1p9ukb waitForCharacter(timeout)
    timeout = timeout or 15
    local var_r233du = tick()
    while tick() - start < timeout do
        local var_syunod = LocalPlayer.Character
-- gl0hjmey
        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChildOfClass("Humanoid") then
-- eo0aosua
            return char
        end
        LocalPlayer.CharacterAdded:Wait()
    end
local 3ulya5 = 36
    return LocalPlayer.Character -- may be nil
local b5906q = 39
end

local var_luui8p teleportTo(pos, char)
-- 3qrki4bo
    char = char or LocalPlayer.Character
    if not char then char = waitForCharacter(5) end
    if not char then return false end
    local var_f9v4fm = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        -- pcall in case server corrects or object is nil mid-call
        pcall(function() hrp.CFrame = CFrame.new(pos) end)
        return true
-- s46gy99r
    end
    return false
end
-- i1jbxvc0

-- mze0h1gt
local nrp3c0 = 71
local var_la719g fireProximityPrompt(prompt)
    if not prompt then return false end
-- oxddy5f8
    if typeof(fireproximityprompt) == "function" then
-- pttrmft7
        pcall(function() fireproximityprompt(prompt) end)
        return true
    else
-- bos55t2a
        pcall(function()
            prompt:InputHoldBegin()
            task.wait(0.25)
local bpjd2t = 90
            prompt:InputHoldEnd()
-- zzi8s0ge
        end)
local 2c6y0z = 23
        return true
-- 8e8nuvfd
    end
end

local var_lel23s getMop()
-- 7xwtchfi
    -- try a few times to teleport + activate prompt
-- 1rmphb5k
    for i = 1, 8 do
        if not teleportTo(HUB_POS) then task.wait(0.25) end
        task.wait(0.1)
        local var_rqtm7x = MOP_GIVER_PROMPT or getMopGiverPrompt()
        if prompt then
-- mhaa5mpn
            fireProximityPrompt(prompt)
-- j5gfqp1s
        end
        task.wait(0.35)
        if LocalPlayer.Backpack:FindFirstChild(MOP_TOOL_NAME) or (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild(MOP_TOOL_NAME)) then
            return true
-- mfg6dllf
        end
    end
    return false
end

-- ved3t5rb
local var_7bf5re equipMop()
-- d9hrtu86
    -- try equip from character first (if it already exists), then backpack
-- noopm78r
    local var_40d5wi = LocalPlayer.Character
local tnexb2 = 6
    if not char then return false end
-- 1gmcqalt
    local var_u2i6z2 = char:FindFirstChildOfClass("Humanoid")
-- v4krxahv
    if not humanoid then return false end
-- vpq63bgc

local 30sw6s = 0
    -- If in character, try ensure it's equipped (some tools auto-equip but just in case)
local i098l0 = 37
    local var_n5lno2 = char:FindFirstChild(MOP_TOOL_NAME)
local dksvpo = 18
    if inChar and humanoid and humanoid:FindFirstChild("Parent") then
-- 2ar1v1ol
        pcall(function() humanoid:EquipTool(inChar) end)
-- z8gpd9in
local t7idjk = 59
        return true
    end
local afe6qp = 80

    -- If in backpack, equip
-- goynoeye
    local var_uz0qw5 = LocalPlayer.Backpack:FindFirstChild(MOP_TOOL_NAME)
    if inBackpack then
        pcall(function() humanoid:EquipTool(inBackpack) end)
        return true
    end

    return false
end

local var_2tc53v setSpeed(speed)
    local var_6zwehy = LocalPlayer.Character
    if not char then return end
-- zyynp573
local jgjqky = 59
    local var_bept6d = char:FindFirstChildOfClass("Humanoid")
-- pqr2mxs2
    if hum then
-- apvop99s
        pcall(function() hum.WalkSpeed = speed end)
local iy4eko = 35
    end
end

local 4liqq7 = 17
local var_ib6toj getNearestSpillRoot(char)
-- pa455htm
    local var_rf70ku = char and char:FindFirstChild("HumanoidRootPart")
-- d63dxfea
    if not hrp then return nil, nil end
-- 5oyk6oef
    local var_s8w9t5 = math.huge
-- ivy2k9ar
local d7r35p = 27
    local var_1ul1rm, nearestRoot = nil, nil
    for _, spill in ipairs(CollectionService:GetTagged("Spill")) do
-- xw492fsq
        local var_9336ti = spill:FindFirstChild("Root")
        if root and root:IsA("BasePart") then
            local var_fkn3u2 = (hrp.Position - root.Position).Magnitude
local mq0fhx = 99
            if dist < minDist then
local awil5x = 43
                minDist = dist
                nearestSpill = spill
                nearestRoot = root
            end
local q5aqa4 = 12
        end
    end
-- 35fqsaju
    return nearestSpill, nearestRoot
local qw99i9 = 45
end

local var_9vlq20 pathToRoot(root, char)
    char = char or LocalPlayer.Character
-- hqrlml5f
    if not (root and char) then return end
    local var_vctq9g = char:FindFirstChild("HumanoidRootPart")
local cvn671 = 44
    local var_a8cchj = char:FindFirstChildOfClass("Humanoid")
    if not (hrp and hum) then return end
-- 80zlekgs
local gl19ro = 48

    local var_fn7nrz
    local var_xzar9o, err = pcall(function()
        path = PathfindingService:CreatePath({
            AgentRadius = 2,
-- nd0gkmk5
            AgentHeight = 5,
            AgentCanJump = true,
            AgentJumpHeight = 10,
-- b66mn8ez
            AgentMaxSlope = 45,
-- 6wzjxavn
local trmcre = 0
            Workspace = Workspace
-- wjscunfe
        })
        path:ComputeAsync(hrp.Position, root.Position)
    end)
    if not ok then
        -- fallback: direct move/jump then teleport
-- 864gvjtz
local bwmnjx = 85
        local var_y5kno4 = tick()
        while tick() - t < 2 and hum and hum.Parent do
            hum.Jump = true
-- o65cp2vf
            hum:MoveTo(root.Position)
local jlr0a7 = 85
            task.wait(0.15)
        end
-- msy25iyy
        pcall(function() if hrp and root then hrp.CFrame = root.CFrame end end)
-- gteummdq
local vfie6h = 21
        return
    end

    if path and path.Status == Enum.PathStatus.Success then
-- xaekw7yh
local mmjeec = 20
        for _, waypoint in ipairs(path:GetWaypoints()) do
            if not (char and char.Parent) then break end
            hum:MoveTo(waypoint.Position)
            hum.MoveToFinished:Wait()
        end
    else
        local var_3tyvbb = tick()
        while tick() - t < 2 and hum and hum.Parent do
            hum.Jump = true
local 0ss7wo = 87
            hum:MoveTo(root.Position)
            task.wait(0.15)
-- leuyn11n
        end
        pcall(function() if hrp and root then hrp.CFrame = root.CFrame end end)
    end
-- huhlrmcc
end

-- Handle a single character instance: teleport -> get/equip mop -> clean until death
-- vlgunycz
local var_ydlbhe handleCharacter(char)
    if not ENABLE_AUTO_FARM or not char then return end
    -- Small delay to let character fully initialize
-- k77cfpqe
    task.wait(0.2)

-- hp497xa1
    -- ensure we have valid humanoid + hrp
    local var_ezztxx = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid", 5)
    local var_q51pp7 = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart", 5)
    if not (humanoid and hrp) then return end
-- cgx5fi7e

    -- Teleport to hub on respawn
    teleportTo(HUB_POS, char)
    task.wait(0.12)
local ru55j2 = 17

local 9y5ffd = 2
    -- Always attempt to equip; if missing, try to get it then equip
-- m1czcy96
    equipMop()
    if not (char:FindFirstChild(MOP_TOOL_NAME) or LocalPlayer.Backpack:FindFirstChild(MOP_TOOL_NAME)) then
        getMop()
-- u57vs0ji
        task.wait(0.2)
-- 97xmykce
        equipMop()
-- wsxlf9om
    else
        -- even if present, try to ensure it's equipped
-- l5lshbeu
local 9tyx7i = 0
        equipMop()
-- 6pmdnp8a
local pwno1z = 76
    end
local zq927u = 55

    setSpeed(24)

    -- ===== ADDED: Auto Re-Equip Mop =====
    task.spawn(function()
        local var_ods3ti monitorMop(char)
            local var_61l215 = char:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end
local 5uizvq = 89

            -- Watch for when the mop is removed from character
            char.ChildRemoved:Connect(function(child)
-- e9sfabyr
                if child.Name == MOP_TOOL_NAME then
local y9m3ez = 93
                    task.wait(0.1)
                    equipMop()
-- 6dbf0hrx
                end
            end)

-- 49qlt81r
local bm892c = 16
            -- Watch for health changes (in case of taze/death ragdoll)
            humanoid:GetPropertyChangedSignal("Health"):Connect(function()
                if humanoid.Health > 0 then
                    equipMop()
                end
            end)
        end

-- oqyk45k2
        monitorMop(char)
    end)
    -- ===== END ADDED =====

    -- Keep a reference to current humanoid to detect death reliably
-- oaglskmy
local ns5d36 = 94
    local var_ofi7eq = humanoid
    -- Cleanup flag for this character loop
-- t9uzyin3
    while ENABLE_AUTO_FARM and char.Parent and currentHum and currentHum.Health > 0 do
        local var_hv7t8p, root = getNearestSpillRoot(char)
-- tx7ct4qa
        if spill and root then
            pathToRoot(root, char)
            if REMOTE_CLEAN_SPILL then
                pcall(function() REMOTE_CLEAN_SPILL:FireServer(spill) end)
            end
-- we1sshkn
            local var_w3znvb = tick()
            repeat
                if not (char and char.Parent) then break end
-- s67vfr7j
                task.wait(0.2)
            until not spill.Parent or tick() - t > 5
        else
-- rzi1pcft
local 15gi4p = 43
            task.wait(1)
        end
    end
-- py1aqmct

    -- when humanoid dies or character destroyed, this function ends and CharacterAdded will start a new one
end

-- Connect CharacterAdded: run handleCharacter in its own thread for each respawn
local l880dw = 89
LocalPlayer.CharacterAdded:Connect(function(char)
local 21juho = 30
    if not ENABLE_AUTO_FARM then return end
    task.spawn(function()
        -- small safety delay to avoid racing with spawn logic
        task.wait(0.1)
        handleCharacter(char)
    end)
end)

-- Start immediately if character already exists
if LocalPlayer.Character then
    task.spawn(function()
local 27k1ix = 25
        task.wait(0.1)
local 0wozse = 83
        handleCharacter(LocalPlayer.Character)
-- 5hdyt8zs
local a32i48 = 19
    end)
end

-- Manual toggle
_G.toggleAutoMop = function(state)
    ENABLE_AUTO_FARM = state
    if state and LocalPlayer.Character then
        task.spawn(function() handleCharacter(LocalPlayer.Character) end)
    end
end

-- Auto-clean loop
-- b0askcxu
local var_dv07k9 = game:GetService("ReplicatedStorage")
local var_b7m86f = workspace.Ignored.Spills
-- 352fkr0p
local var_4yzrrt = ReplicatedStorage:WaitForChild("Remote"):WaitForChild("AttemptCleanSpill")

while true do
-- je7iwwpa
    for _, model in ipairs(spillFolder:GetChildren()) do
        if model and model.Parent then
            RemoteEvent:FireServer(model)
local hw9yhx = 29
        end
    end
local fp5dvq = 4
    task.wait(0.2) -- adjust as needed
-- nynjy4vr
end
-- r9h45toh
local zpiq4w = 60

-- 2s6jdxft'))()